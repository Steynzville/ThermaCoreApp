name: Focused Code Quality and Security Checks
permissions:
  contents: write
  pull-requests: write

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: dummy-test-secret-key-123-for-github-actions
      DATABASE_URL: sqlite:///test.db
      FLASK_ENV: test
      FLASK_APP: app.py
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js (for pnpm)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install pnpm dependencies (frontend)
        run: pnpm install

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies (backend)
        run: pip install -r backend/requirements.txt

      - name: Run Frontend Tests
        run: pnpm test

      - name: Run Backend Tests
        run: pytest
        working-directory: backend

  python-quality-and-security:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: dummy-test-secret-key-123-for-github-actions
      DATABASE_URL: sqlite:///test.db
      FLASK_ENV: test
      FLASK_APP: app.py
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: pip install -r backend/requirements.txt flake8 ruff bandit

      - name: Run Flake8 (Python Linter)
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        working-directory: backend

      - name: Run Flake8 (Python Style Guide)
        run: flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        working-directory: backend

      - name: Run Ruff (Python Linter/Formatter)
        run: ruff check .
        working-directory: backend

      - name: Run Bandit (Python SAST)
        run: bandit -r . -l -f json -o .bandit_report.json
        working-directory: backend

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: backend/.bandit_report.json

  dependency-and-secret-scanning:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4

      - name: osv-scanner
        uses: google/osv-scanner-action@v2.2.3
        with:
          scan-path: .

      - name: Run Secret Scanner
        uses: secret-scanner/action@0.0.2
        with:
          fail_on_new_secrets: true

  dependabot-auto-merge:
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Enable auto-merge for Dependabot PRs
        if: ${{ steps.metadata.outputs.update-type == 'version-update:semver-patch' }}
        run: |
          gh pr merge --auto --merge "${{ github.event.pull_request.html_url }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Approve Dependabot PRs
        if: ${{ steps.metadata.outputs.update-type == 'version-update:semver-patch' }}
        run: |
          gh pr review --approve "${{ github.event.pull_request.html_url }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
