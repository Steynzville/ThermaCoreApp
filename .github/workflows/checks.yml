name: Focused Code Quality and Security Checks
permissions:
  contents: write
  pull-requests: write
  security-events: write

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: dummy-test-secret-key-123-for-github-actions
      JWT_SECRET_KEY: dummy-jwt-secret-key-456-for-github-actions
      FLASK_ENV: test
      FLASK_APP: app.py
      # MQTT environment variables to prevent production config errors
      MQTT_CERT_PATH: /dummy/path/to/cert.pem
      MQTT_KEY_PATH: /dummy/path/to/key.pem
      MQTT_CA_PATH: /dummy/path/to/ca.pem
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        run: |
          sudo systemctl start docker
          docker --version
          docker-compose --version

      - name: Start Database Service
        run: |
          docker-compose up -d database
          sleep 10  # Wait for database to be ready

      - name: Initialize Database Schema
        run: |
          docker-compose exec -T database psql -U thermacore_user -d thermacore -c "
          CREATE EXTENSION IF NOT EXISTS timescaledb;
          SELECT extname, extversion FROM pg_extension WHERE extname = 'timescaledb';
          "

      - name: Build and Start Backend
        run: |
          docker-compose build backend
          docker-compose up -d backend
          sleep 5  # Wait for backend to be ready

      - name: Run Database Migrations
        run: |
          docker-compose exec -T backend python -c "
          from app import create_app, db
          from app.models.sensor_reading import SensorReading
          
          app = create_app('testing')
          with app.app_context():
              # Create all tables
              db.drop_all()
              db.create_all()
              print('✅ Database tables created')
              
              # Initialize TimescaleDB hypertables
              try:
                  SensorReading.create_hypertable()
                  print('✅ TimescaleDB hypertables initialized')
              except Exception as e:
                  print(f'📝 Note: {e}')
                  
              # Verify tables exist
              from sqlalchemy import inspect
              inspector = inspect(db.engine)
              tables = inspector.get_table_names()
              print(f'📊 Tables in database: {tables}')
          "

      - name: Run Backend Tests
        run: |
          docker-compose exec -T backend python -m pytest -v --tb=short

      - name: Run Frontend Tests
        run: |
          # Build frontend for testing
          docker-compose build frontend
          docker-compose run --rm frontend npm test

      - name: Stop Services
        if: always()
        run: docker-compose down

  python-quality-and-security:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: dummy-test-secret-key-123-for-github-actions
      JWT_SECRET_KEY: dummy-jwt-secret-key-456-for-github-actions
      DATABASE_URL: sqlite:///test.db
      FLASK_ENV: test
      FLASK_APP: app.py
      MQTT_CERT_PATH: /dummy/path/to/cert.pem
      MQTT_KEY_PATH: /dummy/path/to/key.pem
      MQTT_CA_PATH: /dummy/path/to/ca.pem
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: pip install -r backend/requirements.txt ruff bandit

      - name: Run Ruff (Python Linter/Formatter)
        run: ruff check .
        working-directory: backend

      - name: Create Bandit Configuration
        run: |
          cat > .bandit << 'EOF'
          [bandit]
          exclude_dirs = tests,app/tests
          skips = B101,B311,B105,B107
          targets = app,services,middleware,routes,utils
          EOF
        working-directory: backend

      - name: Run Bandit and Generate SARIF Report
        run: |
          # Run bandit and capture exit code
          bandit -c .bandit -r . -f json -o bandit_report.json --severity-level high,medium || true
          
          # Convert Bandit JSON to SARIF for GitHub Security tab
          python -c "
          import json
          try:
              with open('bandit_report.json', 'r') as f:
                  bandit_data = json.load(f)
              
              sarif = {
                  '\$schema': 'https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json',
                  'version': '2.1.0',
                  'runs': [{
                      'tool': {
                          'driver': {
                              'name': 'Bandit',
                              'informationUri': 'https://bandit.readthedocs.io/',
                              'rules': []
                          }
                      },
                      'results': []
                  }]
              }
              
              for issue in bandit_data.get('results', []):
                  # Only include high/medium severity issues
                  if issue.get('issue_severity') in ['HIGH', 'MEDIUM']:
                      sarif['runs'][0]['results'].append({
                          'ruleId': issue.get('test_id', ''),
                          'level': 'error' if issue.get('issue_severity') == 'HIGH' else 'warning',
                          'message': {
                              'text': issue.get('issue_text', '')
                          },
                          'locations': [{
                              'physicalLocation': {
                                  'artifactLocation': {
                                      'uri': issue.get('filename', '').replace('./', '')
                                  },
                                  'region': {
                                      'startLine': issue.get('line_number', 0),
                                      'startColumn': issue.get('col_offset', 0)
                                  }
                              }
                          }]
                      })
              
              with open('bandit_sarif.json', 'w') as f:
                  json.dump(sarif, f, indent=2)
              print('SARIF report generated successfully')
          except Exception as e:
              print(f'Error generating SARIF: {e}')
          "
        working-directory: backend

      - name: Upload Security Scan Results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: backend/bandit_sarif.json
          wait-for-processing: true

      - name: Upload Bandit Report Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: backend/bandit_report.json

  dependency-and-secret-scanning:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4

      - name: Run OSV Scanner (CLI Version)
        run: |
          # Install OSV Scanner CLI
          curl -LO https://github.com/google/osv-scanner/releases/download/v1.7.0/osv-scanner_1.7.0_linux_amd64.deb
          sudo dpkg -i osv-scanner_1.7.0_linux_amd64.deb
          
          # Run OSV Scanner
          osv-scanner --config .osv-scanner.toml . || echo "OSV Scanner completed with findings"
          
          # Alternative: Run without config file
          osv-scanner -r . || echo "OSV Scanner completed with findings"

      - name: Create OSV Scanner Config (if needed)
        run: |
          cat > .osv-scanner.toml << 'EOF'
          [experimental]
          # Skip git operations for faster scanning
          no-git = true
          
          [score]
          # Minimum score to consider a vulnerability
          minimum = 5.0
          EOF

      - name: Run Secret Scanner
        uses: secret-scanner/action@0.2.1
        with:
          fail_on_new_secrets: true

  dependabot-auto-merge:
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Enable auto-merge for Dependabot PRs
        if: ${{ steps.metadata.outputs.update-type == 'version-update:semver-patch' }}
        run: |
          gh pr merge --auto --merge "${{ github.event.pull_request.html_url }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Approve Dependabot PRs
        if: ${{ steps.metadata.outputs.update-type == 'version-update:semver-patch' }}
        run: |
          gh pr review --approve "${{ github.event.pull_request.html_url }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
