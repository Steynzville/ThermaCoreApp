name: Checks
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions:
  contents: read
  id-token: write

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"
  POETRY_VERSION: "1.8.3"
  COVERAGE_THRESHOLD: "85"
  DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/app_test"

jobs:
  lint:
    name: Lint & Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: pip install poetry==${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-ansi

      - name: Run black
        run: |
          poetry run black --check .

      - name: Run isort
        run: |
          poetry run isort --check-only .

      - name: Run flake8
        run: |
          poetry run flake8 .

      - name: Run mypy
        run: |
          poetry run mypy .

  tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app_test
        ports: ["5432:5432"]
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports: ["6379:6379"]
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Poetry virtualenv
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      - name: Install Poetry
        run: pip install poetry==${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-ansi

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..20}; do
            if pg_isready -h localhost -U postgres; then
              echo "Postgres is ready!"
              break
            fi
            echo "Waiting for Postgres..."
            sleep 3
          done

      - name: Wait for Redis to be ready
        run: |
          for i in {1..20}; do
            if redis-cli -h localhost ping; then
              echo "Redis is ready!"
              break
            fi
            echo "Waiting for Redis..."
            sleep 3
          done

      - name: Run Database Migrations (Alembic)
        run: |
          poetry run alembic upgrade head

      - name: Seed Test Data
        run: |
          poetry run python -m app.seed_test_data
          
      - name: Run Integration Tests with Coverage
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          poetry run pytest -v --maxfail=1 --disable-warnings --cov=app --cov-report=xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: false

  docker-validation:
    name: Docker Build Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate docker-compose.yml
        run: |
          docker compose config

      - name: Build images
        run: |
          docker compose build --parallel

      - name: Start containers
        run: |
          docker compose up -d
          sleep 10
          docker compose ps

      - name: Run quick backend health check
        run: |
          docker compose exec -T backend python -c "
          import requests, sys
          try:
              r = requests.get('http://localhost:5000/health', timeout=5)
              print('Health check:', r.status_code, r.text[:100])
              sys.exit(0 if r.ok else 1)
except Exception as e:
    print('Health check failed:', e)
    sys.exit(1)
"

      - name: Stop and cleanup
        if: always()
        run: |
          docker compose down -v --remove-orphans

  security:
    name: Python Security & Dependency Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies for security checks
        run: |
          pip install bandit safety

      - name: Run Bandit Security Scan
        run: |
          bandit -r app -f txt -o bandit_report.txt || true

      - name: Run Safety Vulnerability Scan
        run: |
          pip install -r requirements.txt
          safety check --full-report > safety_report.txt || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: python-security-reports
          path: |
            bandit_report.txt
            safety_report.txt

  secrets:
    name: Secret Scanning & Dependency Review
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Gitleaks
        run: |
          curl -sSfL https://github.com/gitleaks/gitleaks/releases/download/v8.18.1/gitleaks_8.18.1_linux_x64.tar.gz | tar xz -C /tmp/
          chmod +x /tmp/gitleaks
          sudo mv /tmp/gitleaks /usr/local/bin/
          gitleaks detect --source . --no-git --verbose --redact

      - name: Dependency Review
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v4
        dependency-audit:
        
      - name: Dependency & Vulnerability Audit
        runs-on: ubuntu-latest
        steps:
        
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install OSV Scanner
        run: |
          curl -sSfL https://github.com/google/osv-scanner/releases/download/v1.7.3/osv-scanner_linux_amd64 -o osv-scanner
          chmod +x osv-scanner
          sudo mv osv-scanner /usr/local/bin/

      - name: Run OSV Scanner
        run: |
          osv-scanner --recursive --lockfile=poetry.lock > osv-report.txt || true

      - name: Upload OSV report
        uses: actions/upload-artifact@v4
        with:
          name: osv-scan-report
          path: osv-report.txt

  dependabot:
    name: Dependabot & Auto-Merge Workflow
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Dependabot metadata
        id: dependabot
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-approve Dependabot PRs
        if: ${{ steps.dependabot.outputs.dependency-type != 'direct' }}
        uses: hmarr/auto-approve-action@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable auto-merge for Dependabot PRs
        if: ${{ steps.dependabot.outputs.update-type == 'version-update:semver-patch' || steps.dependabot.outputs.update-type == 'version-update:semver-minor' }}
        run: gh pr merge --auto --squash "$PR_URL"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_URL: ${{ github.event.pull_request.html_url }}

  report-summary:
    name: Summarize Reports
    runs-on: ubuntu-latest
    if: always()
    needs: [lint, tests, docker-validation, security, secrets, dependency-audit]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: reports

      - name: Display artifact summary
        run: |
          echo "=== Reports Summary ==="
          find reports -type f -maxdepth 3
          echo "======================="

      - name: Upload combined reports
        uses: actions/upload-artifact@v4
        with:
          name: combined-ci-reports
          path: reports/

  notify:
    name: Notifications
    runs-on: ubuntu-latest
    if: always()
    needs: [report-summary]
    steps:
      - name: Job summary output
        run: |
          echo "✅ CI/CD pipeline completed."
          echo "Check artifacts for detailed results."

      - name: Send status to Slack (optional)
        if: ${{ success() && env.SLACK_WEBHOOK_URL != '' }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"✅ GitHub Actions pipeline completed successfully."}' \
          $SLACK_WEBHOOK_URL
